namespace egret3d.ShaderLib {
    export const copy = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"copy_vert","type":35633,"uri":"varying vec2 vUv;\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"},{"name":"copy_frag","type":35632,"uri":"uniform float opacity;\nuniform sampler2D map;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texel = texture2D( map, vUv );\n\tgl_FragColor = opacity * texel;\n}"}],"techniques":[{"name":"copy","attributes":{},"uniforms":{"opacity":{"type":5126,"value":1},"map":{"type":35678}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const cube = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"cube_vert","type":35633,"uri":"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n"},{"name":"cube_frag","type":35632,"uri":"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n"}],"techniques":[{"name":"cube","attributes":{},"uniforms":{"tCube":{"type":35680},"tFlip":{"type":5126,"value":1},"opacity":{"type":5126,"value":1}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const depth = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"depth_vert","type":35633,"uri":"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n"},{"name":"depth_frag","type":35632,"uri":"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n"}],"techniques":[{"name":"depth","attributes":{},"uniforms":{"uvTransform":{"type":35675,"value":[1,0,0,0,1,0,0,0,1]},"displacementMap":{"type":35678},"displacementScale":{"type":5126,"value":1},"displacementBias":{"type":5126},"morphTargetInfluences[0]":{"type":5126},"boneTexture":{"type":35678},"boneTextureSize":{"type":5124},"opacity":{"type":5126,"value":1},"map":{"type":35678},"alphaMap":{"type":35678},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const distanceRGBA = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"distanceRGBA_vert","type":35633,"uri":"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\t\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tgl_Position.x *= -1.0;\n\t\n\tvWorldPosition = worldPosition.xyz;\n}\n"},{"name":"distanceRGBA_frag","type":35632,"uri":"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n"}],"techniques":[{"name":"distanceRGBA","attributes":{},"uniforms":{"uvTransform":{"type":35675,"value":[1,0,0,0,1,0,0,0,1]},"displacementMap":{"type":35678},"displacementScale":{"type":5126,"value":1},"displacementBias":{"type":5126},"morphTargetInfluences[0]":{"type":5126},"boneTexture":{"type":35678},"boneTextureSize":{"type":5124},"map":{"type":35678},"alphaMap":{"type":35678},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const equirect = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"equirect_vert","type":35633,"uri":"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n"},{"name":"equirect_frag","type":35632,"uri":"uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.y = 1.0 - sampleUV.y;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n"}],"techniques":[{"name":"equirect","attributes":{},"uniforms":{"tEquirect":{"type":35678}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const linebasic = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"linebasic_vert","type":35633,"uri":"#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nuniform float linewidth;\nuniform vec2 resolution;\nattribute vec3 instanceStart;\nattribute vec3 instanceEnd;\nattribute vec3 instanceColorStart;\nattribute vec3 instanceColorEnd;\nvarying vec2 vUv;\n#ifdef USE_DASH\n\tuniform float dashScale;\n\tattribute float instanceDistanceStart;\n\tattribute float instanceDistanceEnd;\n\tvarying float vLineDistance;\n#endif\nvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\tfloat a = projectionMatrix[ 2 ][ 2 ];\n\tfloat b = projectionMatrix[ 3 ][ 2 ];\n\tfloat nearEstimate = - 0.5 * b / a;\n\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\tend.xyz = mix( start.xyz, end.xyz, alpha );\n}\nvoid main() {\n\t#ifdef USE_COLOR\n\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\t#endif\n\t#ifdef USE_DASH\n\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t#endif\n\tfloat aspect = resolution.x / resolution.y;\n\tvUv = uv;\n\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\tif ( perspective ) {\n\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\t\t\ttrimSegment( start, end );\n\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\t\t\ttrimSegment( end, start );\n\t\t}\n\t}\n\tvec4 clipStart = projectionMatrix * start;\n\tvec4 clipEnd = projectionMatrix * end;\n\tvec2 ndcStart = clipStart.xy / clipStart.w;\n\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\n\tvec2 dir = ndcEnd - ndcStart;\n\tdir.x *= aspect;\n\tdir = normalize( dir );\n\tvec2 offset = vec2( dir.y, - dir.x );\n\tdir.x /= aspect;\n\toffset.x /= aspect;\n\tif ( position.x < 0.0 ) offset *= - 1.0;\n\tif ( position.y < 0.0 ) {\n\t\toffset += - dir;\n\t} else if ( position.y > 1.0 ) {\n\t\toffset += dir;\n\t}\n\toffset *= linewidth;\n\toffset /= resolution.y;\n\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\toffset *= clip.w;\n\tclip.xy += offset;\n\tgl_Position = clip;\n\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},{"name":"linebasic_frag","type":35632,"uri":"uniform vec3 diffuse;\nuniform float opacity;\n#ifdef USE_DASH\n\tuniform float dashSize;\n\tuniform float gapSize;\n#endif\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vUv;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#ifdef USE_DASH\n\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard;\n\t\tif ( mod( vLineDistance, dashSize + gapSize ) > dashSize ) discard;\n\t#endif\n\tif ( abs( vUv.y ) > 1.0 ) {\n\t\tfloat a = vUv.x;\n\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\tfloat len2 = a * a + b * b;\n\t\tif ( len2 > 1.0 ) discard;\n\t}\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"}],"techniques":[{"name":"linebasic","attributes":{},"uniforms":{"linewidth":{"type":5126,"value":1},"dashScale":{"type":5126,"value":1},"diffuse":{"type":35665,"value":[1,1,1]},"opacity":{"type":5126,"value":1},"dashSize":{"type":5126,"value":1},"gapSize":{"type":5126,"value":1},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const linedashed = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"linedashed_vert","type":35633,"uri":"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n"},{"name":"linedashed_frag","type":35632,"uri":"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n"}],"techniques":[{"name":"linedashed","attributes":{},"uniforms":{"scale":{"type":5126,"value":1},"diffuse":{"type":35665,"value":[1,1,1]},"opacity":{"type":5126,"value":1},"dashSize":{"type":5126,"value":1},"totalSize":{"type":5126,"value":1},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const meshbasic = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"meshbasic_vert","type":35633,"uri":"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#include <custom_vertex>\nvoid main() {\n\t#include <custom_begin_vertex>\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\t#include <custom_end_vertex>\n}\n"},{"name":"meshbasic_frag","type":35632,"uri":"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <custom_fragment>\nvoid main() {\n\t#include <custom_begin_fragment>\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightmapTex = texture2D(lightMap, vUv2);\n\t\tfloat power = 5.0 * lightmapTex.a;\n\t\treflectedLight.indirectDiffuse += lightmapTex.rgb * power * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <custom_end_fragment>\n}\n"}],"techniques":[{"name":"meshbasic","attributes":{},"uniforms":{"uvTransform":{"type":35675,"value":[1,0,0,0,1,0,0,0,1]},"refractionRatio":{"type":5126,"value":0.98},"morphTargetInfluences[0]":{"type":5126},"boneTexture":{"type":35678},"boneTextureSize":{"type":5124},"diffuse":{"type":35665,"value":[1,1,1]},"opacity":{"type":5126,"value":1},"map":{"type":35678},"alphaMap":{"type":35678},"aoMap":{"type":35678},"aoMapIntensity":{"type":5126,"value":1},"reflectivity":{"type":5126,"value":1},"envMapIntensity":{"type":5126,"value":1},"envMap":{"type":35678},"flipEnvMap":{"type":5126,"value":1},"maxMipLevel":{"type":5124},"specularMap":{"type":35678},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const meshlambert = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"meshlambert_vert","type":35633,"uri":"#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#include <custom_vertex>\nvoid main() {\n\t#include <custom_begin_vertex>\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\t#include <custom_end_vertex>\n}\n"},{"name":"meshlambert_frag","type":35632,"uri":"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <custom_fragment>\nvoid main() {\n\t#include <custom_begin_fragment>\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\t#include <custom_end_fragment>\n}\n"}],"techniques":[{"name":"meshlambert","attributes":{},"uniforms":{"uvTransform":{"type":35675,"value":[1,0,0,0,1,0,0,0,1]},"refractionRatio":{"type":5126,"value":0.98},"morphTargetInfluences[0]":{"type":5126},"boneTexture":{"type":35678},"boneTextureSize":{"type":5124},"diffuse":{"type":35665,"value":[1,1,1]},"emissive":{"type":35665,"value":[0,0,0]},"opacity":{"type":5126,"value":1},"map":{"type":35678},"alphaMap":{"type":35678},"aoMap":{"type":35678},"aoMapIntensity":{"type":5126,"value":1},"emissiveMap":{"type":35678},"reflectivity":{"type":5126,"value":1},"envMapIntensity":{"type":5126,"value":1},"envMap":{"type":35678},"flipEnvMap":{"type":5126,"value":1},"maxMipLevel":{"type":5124},"specularMap":{"type":35678},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const meshphong = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"meshphong_vert","type":35633,"uri":"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#include <custom_vertex>\nvoid main() {\n\t#include <custom_begin_vertex>\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\t#include <custom_end_vertex>\n}\n"},{"name":"meshphong_frag","type":35632,"uri":"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <custom_fragment>\nvoid main() {\n\t#include <custom_begin_fragment>\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\t#include <custom_end_fragment>\n}\n"}],"techniques":[{"name":"meshphong","attributes":{},"uniforms":{"uvTransform":{"type":35675,"value":[1,0,0,0,1,0,0,0,1]},"displacementMap":{"type":35678},"displacementScale":{"type":5126,"value":1},"displacementBias":{"type":5126},"refractionRatio":{"type":5126,"value":0.98},"morphTargetInfluences[0]":{"type":5126},"boneTexture":{"type":35678},"boneTextureSize":{"type":5124},"diffuse":{"type":35665,"value":[1,1,1]},"emissive":{"type":35665,"value":[0,0,0]},"specular":{"type":35665,"value":[0.066666,0.066666,0.066666]},"shininess":{"type":5126,"value":30},"opacity":{"type":5126,"value":1},"map":{"type":35678},"alphaMap":{"type":35678},"aoMap":{"type":35678},"aoMapIntensity":{"type":5126,"value":1},"emissiveMap":{"type":35678},"reflectivity":{"type":5126,"value":1},"envMapIntensity":{"type":5126,"value":1},"envMap":{"type":35678},"flipEnvMap":{"type":5126,"value":1},"maxMipLevel":{"type":5124},"gradientMap":{"type":35678},"bumpMap":{"type":35678},"bumpScale":{"type":5126,"value":1},"normalMap":{"type":35678},"normalScale":{"type":35664,"value":[1,1]},"specularMap":{"type":35678},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const meshphysical = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"meshphysical_vert","type":35633,"uri":"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#include <custom_vertex>\nvoid main() {\n\t#include <custom_begin_vertex>\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\t#include <custom_end_vertex>\n}\n"},{"name":"meshphysical_frag","type":35632,"uri":"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <custom_fragment>\nvoid main() {\n\t#include <custom_begin_fragment>\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\t#include <custom_end_fragment>\n}\n"}],"techniques":[{"name":"meshphysical","attributes":{},"uniforms":{"uvTransform":{"type":35675,"value":[1,0,0,0,1,0,0,0,1]},"displacementMap":{"type":35678},"displacementScale":{"type":5126,"value":1},"displacementBias":{"type":5126},"morphTargetInfluences[0]":{"type":5126},"boneTexture":{"type":35678},"boneTextureSize":{"type":5124},"diffuse":{"type":35665,"value":[1,1,1]},"emissive":{"type":35665,"value":[0,0,0]},"roughness":{"type":5126,"value":0.5},"metalness":{"type":5126,"value":0.5},"opacity":{"type":5126,"value":1},"clearCoat":{"type":5126},"clearCoatRoughness":{"type":5126},"map":{"type":35678},"alphaMap":{"type":35678},"aoMap":{"type":35678},"aoMapIntensity":{"type":5126,"value":1},"emissiveMap":{"type":35678},"reflectivity":{"type":5126,"value":1},"envMapIntensity":{"type":5126,"value":1},"envMap":{"type":35678},"flipEnvMap":{"type":5126,"value":1},"maxMipLevel":{"type":5124},"refractionRatio":{"type":5126,"value":0.98},"bumpMap":{"type":35678},"bumpScale":{"type":5126,"value":1},"normalMap":{"type":35678},"normalScale":{"type":35664,"value":[1,1]},"roughnessMap":{"type":35678},"metalnessMap":{"type":35678},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const normal = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"normal_vert","type":35633,"uri":"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n"},{"name":"normal_frag","type":35632,"uri":"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n"}],"techniques":[{"name":"normal","attributes":{},"uniforms":{"uvTransform":{"type":35675,"value":[1,0,0,0,1,0,0,0,1]},"displacementMap":{"type":35678},"displacementScale":{"type":5126,"value":1},"displacementBias":{"type":5126},"morphTargetInfluences[0]":{"type":5126},"boneTexture":{"type":35678},"boneTextureSize":{"type":5124},"opacity":{"type":5126,"value":1},"bumpMap":{"type":35678},"bumpScale":{"type":5126,"value":1},"normalMap":{"type":35678},"normalScale":{"type":35664,"value":[1,1]}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const particle = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"particle_vert","type":35633,"uri":"\n#include <common>\n#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\n\tattribute vec2 corner;\n#endif\nattribute vec3 startPosition;\nattribute vec3 startVelocity;\nattribute vec4 startColor;\nattribute vec3 startSize;\nattribute vec3 startRotation;\nattribute vec2 time;\n#if defined(COLOROGRADIENT)||defined(COLORTWOGRADIENTS)||defined(SIZETWOCURVES)||defined(SIZETWOCURVESSEPERATE)||defined(ROTATIONTWOCONSTANTS)||defined(ROTATIONTWOCURVES)\n  attribute vec4 random0;\n#endif\n#if defined(TEXTURESHEETANIMATIONTWOCURVE)||defined(VELOCITYTWOCONSTANT)||defined(VELOCITYTWOCURVE)\n  attribute vec4 random1;\n#endif\nattribute vec3 startWorldPosition;\nattribute vec4 startWorldRotation;\n#include <particle_common>\n#include <fog_pars_vertex>\nvoid main()\n{\n\tfloat age = u_currentTime - time.y;\n\tfloat t = age/time.x;\n\tif(t>1.0){ \t\t\t\n\t\t\tv_discard=1.0;\n\t\t\treturn;\n  }\n\t  \n\t#include <particle_affector>\n\tvec4 mvPosition = viewMatrix * vec4( center, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\tv_color = computeColor(startColor, t);\n\tv_texcoord = computeUV(uv, t);\n\tv_discard=0.0;\n\t#include <fog_vertex>\n}\n"},{"name":"particle_frag","type":35632,"uri":"\n#include <common>\n#include <fog_pars_fragment>\nuniform sampler2D map;\nuniform vec3 diffuse;\nuniform float opacity;\nvarying float v_discard;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\n#ifdef RENDERMESH\n\tvarying vec4 v_mesh_color;\n#endif\nvoid main()\n{\t\n\t#ifdef RENDERMESH\n\t\tgl_FragColor=v_mesh_color;\n\t#else\n\t\tgl_FragColor=vec4(1.0);\t\n\t#endif\n\tif(v_discard!=0.0)\n\t\tdiscard;\n\tgl_FragColor*=texture2D(map,v_texcoord)*vec4(diffuse, opacity)*v_color*2.0;\n\t#include <fog_fragment>\n}"}],"techniques":[{"name":"particle","attributes":{},"uniforms":{"u_currentTime":{"type":5126},"u_gravity":{"type":35665},"u_worldPosition":{"type":35665,"value":[0,0,0]},"u_worldRotation":{"type":35666,"value":[0,0,0,1]},"u_startRotation3D":{"type":35670},"u_scalingMode":{"type":5124},"u_positionScale":{"type":35665},"u_sizeScale":{"type":35665},"u_lengthScale":{"type":5126},"u_speeaScale":{"type":5126},"u_simulationSpace":{"type":5124},"u_spaceType":{"type":5124},"u_velocityConst":{"type":35665},"u_velocityCurveX[0]":{"type":35664},"u_velocityCurveY[0]":{"type":35664},"u_velocityCurveZ[0]":{"type":35664},"u_velocityConstMax":{"type":35665},"u_velocityCurveMaxX[0]":{"type":35664},"u_velocityCurveMaxY[0]":{"type":35664},"u_velocityCurveMaxZ[0]":{"type":35664},"u_colorGradient[0]":{"type":35666},"u_alphaGradient[0]":{"type":35664},"u_colorGradientMax[0]":{"type":35666},"u_alphaGradientMax[0]":{"type":35664},"u_sizeCurve[0]":{"type":35664},"u_sizeCurveMax[0]":{"type":35664},"u_sizeCurveX[0]":{"type":35664},"u_sizeCurveY[0]":{"type":35664},"u_sizeCurveZ[0]":{"type":35664},"u_sizeCurveMaxX[0]":{"type":35664},"u_sizeCurveMaxY[0]":{"type":35664},"u_sizeCurveMaxZ[0]":{"type":35664},"u_rotationConst":{"type":5126},"u_rotationConstMax":{"type":5126},"u_rotationCurve[0]":{"type":35664},"u_rotationCurveMax[0]":{"type":35664},"u_rotationConstSeprarate":{"type":35665},"u_rotationConstMaxSeprarate":{"type":35665},"u_rotationCurveX[0]":{"type":35664},"u_rotationCurveY[0]":{"type":35664},"u_rotationCurveZ[0]":{"type":35664},"u_rotationCurveW[0]":{"type":35664},"u_rotationCurveMaxX[0]":{"type":35664},"u_rotationCurveMaxY[0]":{"type":35664},"u_rotationCurveMaxZ[0]":{"type":35664},"u_rotationCurveMaxW[0]":{"type":35664},"u_cycles":{"type":5126},"u_subUV":{"type":35666},"u_uvCurve[0]":{"type":35664},"u_uvCurveMax[0]":{"type":35664},"map":{"type":35678},"diffuse":{"type":35665,"value":[1,1,1]},"opacity":{"type":5126,"value":1}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const points = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"points_vert","type":35633,"uri":"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}\n"},{"name":"points_frag","type":35632,"uri":"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n"}],"techniques":[{"name":"points","attributes":{},"uniforms":{"size":{"type":5126},"scale":{"type":5126,"value":1},"morphTargetInfluences[0]":{"type":5126},"diffuse":{"type":35665,"value":[1,1,1]},"opacity":{"type":5126,"value":1},"uvTransform":{"type":35675,"value":[1,0,0,0,1,0,0,0,1]},"map":{"type":35678},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const shadow = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"shadow_vert","type":35633,"uri":"\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n"},{"name":"shadow_frag","type":35632,"uri":"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n"}],"techniques":[{"name":"shadow","attributes":{},"uniforms":{"color":{"type":35665},"opacity":{"type":5126,"value":1}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
    export const sprite = {"version":"3","asset":{"version":"2.0"},"extensions":{"KHR_techniques_webgl":{"shaders":[{"name":"sprite_vert","type":35633,"uri":"\nuniform vec2 scale2D;\nuniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale = scale2D;\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n"},{"name":"sprite_frag","type":35632,"uri":"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n"}],"techniques":[{"name":"sprite","attributes":{},"uniforms":{"center":{"type":35664,"value":[0.5,0.5]},"uvTransform":{"type":35675,"value":[1,0,0,0,1,0,0,0,1]},"diffuse":{"type":35665,"value":[1,1,1]},"opacity":{"type":5126,"value":1},"map":{"type":35678},"clippingPlanes[0]":{"type":35666}}}]},"paper":{}},"extensionsRequired":["paper","KHR_techniques_webgl"],"extensionsUsed":["paper","KHR_techniques_webgl"]};
}
